worker_processes  1;
error_log logs/error.log debug;
events {
    worker_connections 1024;
}
http {

    lua_shared_dict upstream_list 10m;

    lua_package_path '/Users/zlf/IdeaProjects/springcloud-common/openresty/dynamic-upstreams/lib/?.lua;;';
#    lua_package_cpath "E:\workspace\springcloud-common\openresty\dynamic-upstreams\lib\socket\?.dll;E:\workspace\springcloud-common\openresty\dynamic-upstreams\lib\mime\?.dll;;";

    # 第一次初始化upstreams列表
    init_by_lua_block {
        local upstreams = require "upstreams";
        upstreams.update_upstreams();
    }

    # 定时拉取配置
    init_worker_by_lua_block {
        local upstreams = require "upstreams";
        local handle = nil;

        handle = function ()
            --TODO:控制每次只有一个worker执行
            upstreams.update_upstreams();
            ngx.timer.at(5, handle);
        end
        ngx.timer.at(5, handle);
    }

    upstream backends {
        server 0.0.0.1;  #占位server
        balancer_by_lua_block {
            local balancer = require "ngx.balancer";
            local upstreams = require "upstreams";
            local tmp_upstreams = upstreams.get_upstreams();
            ngx.log(ngx.INFO,"000000000000: ", type(tmp_upstreams))
            local ip_port = tmp_upstreams[math.random(1, table.getn(tmp_upstreams))];
            ngx.log(ngx.ERR, "current :=============", math.random(1, table.getn(tmp_upstreams)));
            balancer.set_current_peer(ip_port.ip, ip_port.port);
        }
    }

    server {
        listen       8080;
        # server_name  localhost;
        charset utf-8;
        location / {
            proxy_pass http://backends/;
        }
    }
}
